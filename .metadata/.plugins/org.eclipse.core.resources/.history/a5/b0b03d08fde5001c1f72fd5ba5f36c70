import java.util.List;

import io.javalin.Javalin;
import pojo.EmployeePojo;
import pojo.ReimbursementPojo;
import service.EmployeeService;
import service.EmployeeServiceImpl;
import service.ReimbService;
import service.ReimbServiceImpl;


public class ReimbCrud {

	public static void main(String[] args) {

		ReimbService reimbService = new ReimbServiceImpl();
		EmployeeService employeeService = new EmployeeServiceImpl();


		Javalin server = Javalin.create((config) -> config.enableCorsForAllOrigins());
		server.start(7474);
		
		// endpoint view all requests
		server.get("/reimbursement", (ctx) -> {
			List<ReimbursementPojo> allRequests = reimbService.viewAllRequests();
			ctx.json(allRequests);
		});

		// endpoint submit a request
		server.post("/reimbursement", (ctx) -> {
			ReimbursementPojo newReimbursementPojo = ctx.bodyAsClass(ReimbursementPojo.class);
			ReimbursementPojo returnReimbursementPojo = reimbService.submitRequest(newReimbursementPojo);
			ctx.json(returnReimbursementPojo);
		});
		
		// endpoint view all requests by specific requester
		server.get("/reimbursement/{requesterId}", (ctx) -> {
			List<ReimbursementPojo> allRequestsByRequester = reimbService.viewAllRequestsByRequester(Integer.parseInt(ctx.pathParam("requesterId")));
			ctx.json(allRequestsByRequester);
		});
		
		// endpoint view employee where username == username && password == password
		server.get("/employees/{empUserNme}/{empHashPswd}", (ctx) -> {
			String empUserName = ctx.pathParam("empUserNme");
			String empHashedPassword = ctx.pathParam("empHashPswd");
			//int bookIdInteger = Integer.parseInt(bookId);
			ctx.json(employeeService.getEmployee(empUserName, empHashedPassword));
		});
		
		// endpoint employee "view my account"
		server.get("/employees/{empid}/", (ctx) -> {
			EmployeePojo returnedEmployee = employeeService.empViewInfo(Integer.parseInt(ctx.pathParam("empid")));
			ctx.json(returnedEmployee);
		});
		
		// endpoint update accnt info
		server.put("/reimbursement/{empid}", (ctx) -> {
			int empIdInteger = Integer.parseInt(ctx.pathParam("empid"));
			EmployeePojo newEmployeePojo = ctx.bodyAsClass(EmployeePojo.class);
			EmployeePojo returnEmployeePojo = employeeService.empUpdateInfo(newEmployeePojo, empIdInteger);
			ctx.json(returnEmployeePojo);
		});
		
		// endpoint view all pending by empId
		server.get("/pending/{empid}", (ctx) -> {
			List<ReimbursementPojo> allPendingByEmpId = reimbService.viewPendingRequestsByRequester(Integer.parseInt(ctx.pathParam("empid")));
			ctx.json(allPendingByEmpId);
		});
	}

}
